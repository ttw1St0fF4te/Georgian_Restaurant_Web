{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/providers/query-provider.tsx"],"sourcesContent":["'use client';\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { useState } from 'react';\n\nexport default function QueryProvider({ children }: { children: React.ReactNode }) {\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            staleTime: 60 * 1000, // 1 минута\n            refetchOnWindowFocus: false,\n            retry: (failureCount, error: any) => {\n              // Не повторяем запросы для 4xx ошибок\n              if (error?.status >= 400 && error?.status < 500) {\n                return false;\n              }\n              return failureCount < 3;\n            },\n          },\n          mutations: {\n            retry: false,\n          },\n        },\n      })\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      {process.env.NODE_ENV === 'development' && <ReactQueryDevtools />}\n    </QueryClientProvider>\n  );\n}"],"names":[],"mappings":";;;;AAgCO;;AA9BP;AAAA;AACA;AACA;;;AAJA;;;;AAMe,SAAS,cAAc,KAA2C;QAA3C,EAAE,QAAQ,EAAiC,GAA3C;;IACpC,MAAM,CAAC,YAAY,GAAG,IAAA,yKAAQ;kCAC5B,IACE,IAAI,+LAAW,CAAC;gBACd,gBAAgB;oBACd,SAAS;wBACP,WAAW,KAAK;wBAChB,sBAAsB;wBACtB,KAAK;sDAAE,CAAC,cAAc;gCACpB,sCAAsC;gCACtC,IAAI,CAAA,kBAAA,4BAAA,MAAO,MAAM,KAAI,OAAO,CAAA,kBAAA,4BAAA,MAAO,MAAM,IAAG,KAAK;oCAC/C,OAAO;gCACT;gCACA,OAAO,eAAe;4BACxB;;oBACF;oBACA,WAAW;wBACT,OAAO;oBACT;gBACF;YACF;;IAGJ,qBACE,6LAAC,gNAAmB;QAAC,QAAQ;;YAC1B;YACA,oDAAyB,+BAAiB,6LAAC,6MAAkB;;;;;;;;;;;AAGpE;GA7BwB;KAAA","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/providers/mui-provider.tsx"],"sourcesContent":["'use client';\n\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'light',\n    primary: {\n      main: '#1976d2',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n  },\n});\n\nexport default function MuiThemeProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {children}\n    </ThemeProvider>\n  );\n}"],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;AAHA;;;;AAKA,MAAM,QAAQ,IAAA,6NAAW,EAAC;IACxB,SAAS;QACP,MAAM;QACN,SAAS;YACP,MAAM;QACR;QACA,WAAW;YACT,MAAM;QACR;IACF;AACF;AAEe,SAAS,iBAAiB,KAIxC;QAJwC,EACvC,QAAQ,EAGT,GAJwC;IAKvC,qBACE,6LAAC,mOAAa;QAAC,OAAO;;0BACpB,6LAAC,oLAAW;;;;;YACX;;;;;;;AAGP;KAXwB","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/auth.ts"],"sourcesContent":["import axios from 'axios';\n\n// Конфигурация API\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';\n\n// Типы для аутентификации\nexport interface User {\n  user_id: string;\n  username: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n  phone?: string;\n  country?: string;\n  city?: string;\n  street_address?: string;\n  role: 'admin' | 'manager' | 'user' | 'guest';\n  role_id: number;\n  created_at?: string;\n  last_login?: string;\n}\n\nexport interface LoginCredentials {\n  usernameOrEmail: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  phone?: string;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  user: User;\n}\n\nexport interface RegisterResponse {\n  status: string;\n  message: string;\n  user: User;\n  created_at: string;\n}\n\nexport interface UpdateProfileData {\n  first_name?: string;\n  last_name?: string;\n  phone?: string;\n  country?: string;\n  city?: string;\n  street_address?: string;\n}\n\nexport interface ChangePasswordData {\n  current_password: string;\n  new_password: string;\n}\n\n// Класс для работы с аутентификацией\nclass AuthService {\n  private readonly TOKEN_KEY = 'georgian_restaurant_token';\n  private readonly USER_KEY = 'georgian_restaurant_user';\n  private readonly API_URL = API_BASE_URL;\n\n  // Проверка, выполняется ли код на клиенте\n  private isClient = typeof window !== 'undefined';\n\n  // Настройка axios с автоматическим добавлением токена\n  private api = axios.create({\n    baseURL: this.API_URL,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  constructor() {\n    // Интерцептор для автоматического добавления токена\n    this.api.interceptors.request.use((config) => {\n      const token = this.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Интерцептор для обработки ошибок авторизации\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          // Проверяем, не является ли это ошибкой смены пароля или другими операциями,\n          // где 401 не означает недействительность токена\n          const url = error.config?.url;\n          const isPasswordChangeError = url && (url.includes('/auth/change-password') || url.includes('/auth/profile/password'));\n          const isLoginError = url && url.includes('/auth/login');\n          \n          // Не разлогиниваем пользователя при ошибках смены пароля или входа\n          if (!isPasswordChangeError && !isLoginError) {\n            // Токен недействителен - очищаем данные\n            this.clearAuthData();\n            // Редирект на страницу входа (только на клиенте)\n            if (this.isClient && window.location.pathname !== '/auth/login') {\n              window.location.href = '/auth/login';\n            }\n          }\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Сохранение данных авторизации\n  setAuthData(token: string, user: User): void {\n    if (!this.isClient) return;\n    \n    localStorage.setItem(this.TOKEN_KEY, token);\n    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n  }\n\n  // Получение токена\n  getToken(): string | null {\n    if (!this.isClient) return null;\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  // Получение данных пользователя\n  getUser(): User | null {\n    if (!this.isClient) return null;\n    \n    const userStr = localStorage.getItem(this.USER_KEY);\n    if (!userStr) return null;\n    \n    try {\n      return JSON.parse(userStr);\n    } catch {\n      return null;\n    }\n  }\n\n  // Проверка авторизации\n  isAuthenticated(): boolean {\n    return !!this.getToken() && !!this.getUser();\n  }\n\n  // Проверка срока действия токена\n  isTokenExpired(): boolean {\n    const token = this.getToken();\n    if (!token) return true;\n\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return Date.now() >= payload.exp * 1000;\n    } catch {\n      return true;\n    }\n  }\n\n  // Очистка данных авторизации\n  clearAuthData(): void {\n    if (!this.isClient) return;\n    \n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n  }\n\n  // Вход в систему\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    try {\n      const response = await this.api.post<AuthResponse>('/auth/login', credentials);\n      const { access_token, user } = response.data;\n      \n      this.setAuthData(access_token, user);\n      return response.data;\n    } catch (error: any) {\n      // Улучшенная обработка ошибок\n      if (error.response?.status === 400) {\n        const message = error.response.data?.message;\n        if (Array.isArray(message)) {\n          // Переводим ошибки валидации на русский\n          const translatedErrors = message.map((msg: string) => {\n            if (msg.includes('password must be longer than or equal to')) {\n              return 'Пароль должен содержать минимум 6 символов';\n            }\n            if (msg.includes('username must be longer than or equal to')) {\n              return 'Имя пользователя должно содержать минимум 3 символа';\n            }\n            if (msg.includes('email must be an email')) {\n              return 'Введите корректный email адрес';\n            }\n            if (msg.includes('username should not be empty')) {\n              return 'Введите имя пользователя';\n            }\n            if (msg.includes('password should not be empty')) {\n              return 'Введите пароль';\n            }\n            return msg; // Возвращаем оригинальное сообщение если перевод не найден\n          });\n          throw new Error(translatedErrors.join(', '));\n        } else if (typeof message === 'string') {\n          if (message.includes('password must be longer than or equal to')) {\n            throw new Error('Пароль должен содержать минимум 6 символов');\n          }\n          if (message.includes('username must be longer than or equal to')) {\n            throw new Error('Имя пользователя должно содержать минимум 3 символа');\n          }\n          if (message.includes('email must be an email')) {\n            throw new Error('Введите корректный email адрес');\n          }\n          throw new Error(message);\n        }\n        throw new Error('Ошибка валидации данных');\n      } else if (error.response?.status === 401) {\n        throw new Error('Неверный логин или пароль');\n      } else if (error.response?.status === 403) {\n        throw new Error('Доступ запрещен');\n      } else if (error.response?.status === 500) {\n        throw new Error('Внутренняя ошибка сервера. Попробуйте позже');\n      } else if (error.code === 'NETWORK_ERROR' || !error.response) {\n        throw new Error('Ошибка сети. Проверьте подключение к интернету');\n      }\n      \n      // Если не удалось определить тип ошибки\n      throw new Error(error.response?.data?.message || 'Произошла неизвестная ошибка');\n    }\n  }\n\n  // Регистрация\n  async register(data: RegisterData): Promise<RegisterResponse> {\n    try {\n      const response = await this.api.post<RegisterResponse>('/auth/register', data);\n      return response.data;\n    } catch (error: any) {\n      // Улучшенная обработка ошибок для регистрации\n      if (error.response?.status === 400) {\n        const message = error.response.data?.message;\n        if (Array.isArray(message)) {\n          // Переводим ошибки валидации на русский\n          const translatedErrors = message.map((msg: string) => {\n            if (msg.includes('password must be longer than or equal to')) {\n              return 'Пароль должен содержать минимум 8 символов';\n            }\n            if (msg.includes('username must be longer than or equal to')) {\n              return 'Имя пользователя должно содержать минимум 3 символа';\n            }\n            if (msg.includes('email must be an email')) {\n              return 'Введите корректный email адрес';\n            }\n            if (msg.includes('first_name must be longer than or equal to')) {\n              return 'Имя должно содержать минимум 2 символа';\n            }\n            if (msg.includes('last_name must be longer than or equal to')) {\n              return 'Фамилия должна содержать минимум 2 символа';\n            }\n            if (msg.includes('should not be empty')) {\n              if (msg.includes('username')) return 'Введите имя пользователя';\n              if (msg.includes('password')) return 'Введите пароль';\n              if (msg.includes('email')) return 'Введите email';\n              if (msg.includes('first_name')) return 'Введите имя';\n              if (msg.includes('last_name')) return 'Введите фамилию';\n            }\n            return msg; // Возвращаем оригинальное сообщение если перевод не найден\n          });\n          throw new Error(translatedErrors.join(', '));\n        } else if (typeof message === 'string') {\n          if (message.includes('already exists') || message.includes('уже существует')) {\n            if (message.includes('username') || message.includes('пользователь')) {\n              throw new Error('Пользователь с таким именем уже существует');\n            }\n            if (message.includes('email') || message.includes('почта')) {\n              throw new Error('Пользователь с таким email уже существует');\n            }\n          }\n          throw new Error(message);\n        }\n        throw new Error('Ошибка валидации данных');\n      } else if (error.response?.status === 409) {\n        throw new Error('Пользователь с такими данными уже существует');\n      } else if (error.response?.status === 500) {\n        throw new Error('Внутренняя ошибка сервера. Попробуйте позже');\n      } else if (error.code === 'NETWORK_ERROR' || !error.response) {\n        throw new Error('Ошибка сети. Проверьте подключение к интернету');\n      }\n      \n      // Если не удалось определить тип ошибки\n      throw new Error(error.response?.data?.message || 'Произошла неизвестная ошибка при регистрации');\n    }\n  }\n\n  // Получение профиля\n  async getProfile(): Promise<User> {\n    try {\n      const response = await this.api.get<User>('/auth/profile');\n      \n      // Обновляем данные пользователя в localStorage с полученными данными\n      const token = this.getToken();\n      if (token) {\n        this.setAuthData(token, response.data);\n      }\n      \n      return response.data;\n    } catch (error: any) {\n      if (error.response?.status === 401) {\n        throw new Error('Сессия истекла. Войдите в систему снова');\n      } else if (error.response?.status === 403) {\n        throw new Error('Доступ запрещен');\n      } else if (error.response?.status === 500) {\n        throw new Error('Внутренняя ошибка сервера. Попробуйте позже');\n      } else if (error.code === 'NETWORK_ERROR' || !error.response) {\n        throw new Error('Ошибка сети. Проверьте подключение к интернету');\n      }\n      \n      throw new Error(error.response?.data?.message || 'Ошибка получения профиля');\n    }\n  }\n\n  // Обновление профиля\n  async updateProfile(data: UpdateProfileData): Promise<{ status: string; message: string; updated_user_id: string }> {\n    console.log('Отправка данных профиля:', data);\n    try {\n      const response = await this.api.put('/auth/profile', data);\n      console.log('Ответ сервера:', response.data);\n      \n      // Обновляем данные пользователя в localStorage\n      const currentUser = this.getUser();\n      if (currentUser) {\n        const updatedUser = { ...currentUser, ...data };\n        this.setAuthData(this.getToken()!, updatedUser);\n      }\n      \n      return response.data;\n    } catch (error: any) {\n      console.error('Ошибка обновления профиля:', error.response?.data || error.message);\n      if (error.response?.status === 400) {\n        const message = error.response.data?.message;\n        if (Array.isArray(message)) {\n          const translatedErrors = message.map((msg: string) => {\n            // Переводы ошибок валидации\n            if (msg.includes('first_name must be longer than or equal to') || msg.includes('Имя должно быть от')) {\n              return 'Имя должно содержать минимум 2 символа';\n            }\n            if (msg.includes('last_name must be longer than or equal to') || msg.includes('Фамилия должна быть от')) {\n              return 'Фамилия должна содержать минимум 2 символа';\n            }\n            if (msg.includes('phone must match') || msg.includes('Телефон должен быть в международном формате')) {\n              return 'Телефон должен быть в международном формате, например +79161234567';\n            }\n            if (msg.includes('country must be longer than or equal to') || msg.includes('Название страны должно быть от')) {\n              return 'Название страны должно быть от 2 до 100 символов';\n            }\n            if (msg.includes('city must be longer than or equal to') || msg.includes('Название города должно быть от')) {\n              return 'Название города должно быть от 2 до 100 символов';\n            }\n            if (msg.includes('street_address must be longer than or equal to') || msg.includes('Адрес должен быть от')) {\n              return 'Адрес должен быть от 5 до 500 символов';\n            }\n            if (msg.includes('should not be empty')) {\n              if (msg.includes('first_name')) return 'Введите имя';\n              if (msg.includes('last_name')) return 'Введите фамилию';\n              if (msg.includes('phone')) return 'Введите номер телефона';\n              if (msg.includes('country')) return 'Введите страну';\n              if (msg.includes('city')) return 'Введите город';\n              if (msg.includes('street_address')) return 'Введите адрес';\n            }\n            // Возвращаем исходное сообщение, если перевод не найден\n            return msg;\n          });\n          throw new Error(translatedErrors.join(', '));\n        }\n        throw new Error(message || 'Ошибка валидации данных');\n      } else if (error.response?.status === 401) {\n        throw new Error('Сессия истекла. Войдите в систему снова');\n      } else if (error.response?.status === 403) {\n        throw new Error('Доступ запрещен');\n      } else if (error.response?.status === 500) {\n        throw new Error('Внутренняя ошибка сервера. Попробуйте позже');\n      } else if (error.code === 'NETWORK_ERROR' || !error.response) {\n        throw new Error('Ошибка сети. Проверьте подключение к интернету');\n      }\n      \n      throw new Error(error.response?.data?.message || 'Ошибка обновления профиля');\n    }\n  }\n\n  // Смена пароля\n  async changePassword(data: ChangePasswordData): Promise<{ status: string; message: string; updated_user_id: string }> {\n    try {\n      const response = await this.api.post('/auth/profile/password', data);\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.status === 400) {\n        const message = error.response.data?.message;\n        if (Array.isArray(message)) {\n          const translatedErrors = message.map((msg: string) => {\n            if (msg.includes('password must be longer than or equal to')) {\n              return 'Новый пароль должен содержать минимум 8 символов';\n            }\n            if (msg.includes('current_password is incorrect')) {\n              return 'Неверный текущий пароль';\n            }\n            if (msg.includes('should not be empty')) {\n              if (msg.includes('current_password')) return 'Введите текущий пароль';\n              if (msg.includes('new_password')) return 'Введите новый пароль';\n            }\n            return msg;\n          });\n          throw new Error(translatedErrors.join(', '));\n        } else if (typeof message === 'string') {\n          if (message.includes('current_password is incorrect') || message.includes('Неверный пароль')) {\n            throw new Error('Неверный текущий пароль');\n          }\n          throw new Error(message);\n        }\n        throw new Error('Ошибка валидации данных');\n      } else if (error.response?.status === 401) {\n        // 401 при смене пароля обычно означает неверный текущий пароль\n        const message = error.response.data?.message;\n        if (message && (message.includes('current_password') || message.includes('Unauthorized') || message.includes('пароль'))) {\n          throw new Error('Неверный текущий пароль');\n        }\n        throw new Error('Ошибка авторизации при смене пароля');\n      } else if (error.response?.status === 403) {\n        throw new Error('Доступ запрещен');\n      } else if (error.response?.status === 500) {\n        throw new Error('Внутренняя ошибка сервера. Попробуйте позже');\n      } else if (error.code === 'NETWORK_ERROR' || !error.response) {\n        throw new Error('Ошибка сети. Проверьте подключение к интернету');\n      }\n      \n      throw new Error(error.response?.data?.message || 'Ошибка смены пароля');\n    }\n  }\n\n  // Выход из системы\n  async logout(): Promise<void> {\n    try {\n      // Уведомляем сервер о выходе\n      await this.api.post('/auth/logout');\n    } catch (error) {\n      // Игнорируем ошибки при logout - главное очистить локальные данные\n      console.warn('Logout request failed:', error);\n    } finally {\n      // Очищаем локальные данные\n      this.clearAuthData();\n    }\n  }\n\n  // Проверка роли пользователя\n  hasRole(role: User['role']): boolean {\n    const user = this.getUser();\n    return user?.role === role;\n  }\n\n  // Проверка разрешений\n  canAccess(allowedRoles: User['role'][]): boolean {\n    const user = this.getUser();\n    return user ? allowedRoles.includes(user.role) : false;\n  }\n}\n\n// Экспортируем экземпляр сервиса\nexport const authService = new AuthService();\nexport default authService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/auth-context.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { authService, User } from '@/lib/auth';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (usernameOrEmail: string, password: string) => Promise<void>;\n  register: (data: {\n    username: string;\n    email: string;\n    password: string;\n    first_name: string;\n    last_name: string;\n    phone?: string;\n  }) => Promise<void>;\n  logout: () => Promise<void>;\n  updateUser: (user: User) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user;\n\n  // Инициализация - проверяем сохраненные данные и получаем свежий профиль\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const savedUser = authService.getUser();\n        const token = authService.getToken();\n        \n        if (savedUser && token && !authService.isTokenExpired()) {\n          // Сначала устанавливаем сохраненного пользователя\n          setUser(savedUser);\n          \n          // Затем пытаемся получить свежие данные с сервера\n          try {\n            const freshUserData = await authService.getProfile();\n            console.log('🔄 Обновленные данные профиля:', freshUserData);\n            setUser(freshUserData);\n          } catch (error) {\n            console.warn('Не удалось получить свежие данные профиля, используем сохраненные:', error);\n            // Оставляем сохраненные данные если не удалось получить свежие\n          }\n        } else {\n          // Токен истек или данные некорректны\n          authService.clearAuthData();\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        authService.clearAuthData();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (usernameOrEmail: string, password: string): Promise<void> => {\n    try {\n      const response = await authService.login({ usernameOrEmail, password });\n      setUser(response.user);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const register = async (data: {\n    username: string;\n    email: string;\n    password: string;\n    first_name: string;\n    last_name: string;\n    phone?: string;\n  }): Promise<void> => {\n    try {\n      await authService.register(data);\n      // После регистрации не логиним автоматически\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await authService.logout();\n      setUser(null);\n    } catch (error) {\n      // Даже если запрос не удался, очищаем локальные данные\n      console.error('Logout error:', error);\n      authService.clearAuthData();\n      setUser(null);\n    }\n  };\n\n  const updateUser = (updatedUser: User): void => {\n    setUser(updatedUser);\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"names":[],"mappings":";;;;;;;AAEA;AACA;;;AAHA;;;AAsBA,MAAM,4BAAc,IAAA,8KAAa,EAA8B;AAMxD,MAAM,eAA4C;QAAC,EAAE,QAAQ,EAAE;;IACpE,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,yKAAQ,EAAc;IAC9C,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,yKAAQ,EAAC;IAE3C,MAAM,kBAAkB,CAAC,CAAC;IAE1B,yEAAyE;IACzE,IAAA,0KAAS;kCAAC;YACR,MAAM;mDAAW;oBACf,IAAI;wBACF,MAAM,YAAY,oIAAW,CAAC,OAAO;wBACrC,MAAM,QAAQ,oIAAW,CAAC,QAAQ;wBAElC,IAAI,aAAa,SAAS,CAAC,oIAAW,CAAC,cAAc,IAAI;4BACvD,kDAAkD;4BAClD,QAAQ;4BAER,kDAAkD;4BAClD,IAAI;gCACF,MAAM,gBAAgB,MAAM,oIAAW,CAAC,UAAU;gCAClD,QAAQ,GAAG,CAAC,kCAAkC;gCAC9C,QAAQ;4BACV,EAAE,OAAO,OAAO;gCACd,QAAQ,IAAI,CAAC,sEAAsE;4BACnF,+DAA+D;4BACjE;wBACF,OAAO;4BACL,qCAAqC;4BACrC,oIAAW,CAAC,aAAa;wBAC3B;oBACF,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,8BAA8B;wBAC5C,oIAAW,CAAC,aAAa;oBAC3B,SAAU;wBACR,aAAa;oBACf;gBACF;;YAEA;QACF;iCAAG,EAAE;IAEL,MAAM,QAAQ,OAAO,iBAAyB;QAC5C,IAAI;YACF,MAAM,WAAW,MAAM,oIAAW,CAAC,KAAK,CAAC;gBAAE;gBAAiB;YAAS;YACrE,QAAQ,SAAS,IAAI;QACvB,EAAE,OAAO,OAAO;YACd,MAAM;QACR;IACF;IAEA,MAAM,WAAW,OAAO;QAQtB,IAAI;YACF,MAAM,oIAAW,CAAC,QAAQ,CAAC;QAC3B,6CAA6C;QAC/C,EAAE,OAAO,OAAO;YACd,MAAM;QACR;IACF;IAEA,MAAM,SAAS;QACb,IAAI;YACF,MAAM,oIAAW,CAAC,MAAM;YACxB,QAAQ;QACV,EAAE,OAAO,OAAO;YACd,uDAAuD;YACvD,QAAQ,KAAK,CAAC,iBAAiB;YAC/B,oIAAW,CAAC,aAAa;YACzB,QAAQ;QACV;IACF;IAEA,MAAM,aAAa,CAAC;QAClB,QAAQ;IACV;IAEA,MAAM,QAAyB;QAC7B;QACA;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;kBAC1B;;;;;;AAGP;GAjGa;KAAA;AAmGN,MAAM,UAAU;;IACrB,MAAM,UAAU,IAAA,2KAAU,EAAC;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANa","debugId":null}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/config.ts"],"sourcesContent":["// API Configuration\nexport const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3000';\n\nexport const API_ENDPOINTS = {\n  // Health\n  health: '/health',\n  healthDb: '/health/db',\n  healthDbInfo: '/health/db/info',\n  \n  // Auth (будущие эндпоинты)\n  login: '/auth/login',\n  register: '/auth/register',\n  profile: '/auth/profile',\n  \n  // Restaurants\n  restaurants: '/restaurants',\n  restaurantsActive: '/restaurants/active',\n  \n  // Menu\n  menu: '/menu',\n  menuCategories: '/menu/categories',\n  menuItems: '/menu/items',\n  \n  // Tables\n  tables: '/tables',\n  tablesAvailable: '/tables/available',\n  \n  // Reservations\n  reservations: '/reservations',\n  reservationsUser: '/reservations/user',\n  \n  // Orders\n  orders: '/orders',\n  ordersUser: '/orders/user',\n  \n  // Audit\n  audit: '/audit',\n  auditRecent: '/audit/recent',\n  auditStatistics: '/audit/statistics',\n} as const;\n\nexport const HTTP_STATUS = {\n  OK: 200,\n  CREATED: 201,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  INTERNAL_SERVER_ERROR: 500,\n} as const;"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;;;;AACQ;AAArB,MAAM,eAAe,6DAAwC;AAE7D,MAAM,gBAAgB;IAC3B,SAAS;IACT,QAAQ;IACR,UAAU;IACV,cAAc;IAEd,2BAA2B;IAC3B,OAAO;IACP,UAAU;IACV,SAAS;IAET,cAAc;IACd,aAAa;IACb,mBAAmB;IAEnB,OAAO;IACP,MAAM;IACN,gBAAgB;IAChB,WAAW;IAEX,SAAS;IACT,QAAQ;IACR,iBAAiB;IAEjB,eAAe;IACf,cAAc;IACd,kBAAkB;IAElB,SAAS;IACT,QAAQ;IACR,YAAY;IAEZ,QAAQ;IACR,OAAO;IACP,aAAa;IACb,iBAAiB;AACnB;AAEO,MAAM,cAAc;IACzB,IAAI;IACJ,SAAS;IACT,aAAa;IACb,cAAc;IACd,WAAW;IACX,WAAW;IACX,uBAAuB;AACzB","debugId":null}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/client.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { API_BASE_URL } from './config';\n\n// Создаем экземпляр axios с базовой конфигурацией\nexport const apiClient: AxiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Типы для API ответов\nexport interface ApiResponse<T = any> {\n  data: T;\n  message?: string;\n  status: number;\n}\n\nexport interface ApiError {\n  message: string;\n  status: number;\n  error?: string;\n}\n\n// Интерцептор запросов - добавляем JWT токен если есть\napiClient.interceptors.request.use(\n  (config) => {\n    // Получаем токен из localStorage\n    if (typeof window !== 'undefined') {\n      const token = localStorage.getItem('georgian_restaurant_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Интерцептор ответов - обработка ошибок\napiClient.interceptors.response.use(\n  (response: AxiosResponse) => {\n    return response;\n  },\n  (error) => {\n    const apiError: ApiError = {\n      message: error.response?.data?.message || error.message || 'Неизвестная ошибка',\n      status: error.response?.status || 500,\n      error: error.response?.data?.error,\n    };\n\n    // Если 401 - перенаправляем на логин\n    if (error.response?.status === 401) {\n      if (typeof window !== 'undefined') {\n        localStorage.removeItem('georgian_restaurant_token');\n        localStorage.removeItem('georgian_restaurant_user');\n        window.location.href = '/auth/login';\n      }\n    }\n\n    return Promise.reject(apiError);\n  }\n);\n\n// Вспомогательные функции для API запросов\nexport const api = {\n  get: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> =>\n    apiClient.get(url, config).then((response) => response.data),\n    \n  post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    apiClient.post(url, data, config).then((response) => response.data),\n    \n  put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    apiClient.put(url, data, config).then((response) => response.data),\n    \n  patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> =>\n    apiClient.patch(url, data, config).then((response) => response.data),\n    \n  delete: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> =>\n    apiClient.delete(url, config).then((response) => response.data),\n};"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAGO,MAAM,YAA2B,mJAAK,CAAC,MAAM,CAAC;IACnD,SAAS,8IAAY;IACrB,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;AACF;AAeA,uDAAuD;AACvD,UAAU,YAAY,CAAC,OAAO,CAAC,GAAG,CAChC,CAAC;IACC,iCAAiC;IACjC,wCAAmC;QACjC,MAAM,QAAQ,aAAa,OAAO,CAAC;QACnC,IAAI,OAAO;YACT,OAAO,OAAO,CAAC,aAAa,GAAG,AAAC,UAAe,OAAN;QAC3C;IACF;IACA,OAAO;AACT,GACA,CAAC;IACC,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGF,yCAAyC;AACzC,UAAU,YAAY,CAAC,QAAQ,CAAC,GAAG,CACjC,CAAC;IACC,OAAO;AACT,GACA,CAAC;QAEY,sBAAA,iBACD,kBACD,uBAAA,kBAIL;IAPJ,MAAM,WAAqB;QACzB,SAAS,EAAA,kBAAA,MAAM,QAAQ,cAAd,uCAAA,uBAAA,gBAAgB,IAAI,cAApB,2CAAA,qBAAsB,OAAO,KAAI,MAAM,OAAO,IAAI;QAC3D,QAAQ,EAAA,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,MAAM,KAAI;QAClC,KAAK,GAAE,mBAAA,MAAM,QAAQ,cAAd,wCAAA,wBAAA,iBAAgB,IAAI,cAApB,4CAAA,sBAAsB,KAAK;IACpC;IAEA,qCAAqC;IACrC,IAAI,EAAA,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,MAAM,MAAK,KAAK;QAClC,wCAAmC;YACjC,aAAa,UAAU,CAAC;YACxB,aAAa,UAAU,CAAC;YACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB;IACF;IAEA,OAAO,QAAQ,MAAM,CAAC;AACxB;AAIK,MAAM,MAAM;IACjB,KAAK,CAAU,KAAa,SAC1B,UAAU,GAAG,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;IAE7D,MAAM,CAAU,KAAa,MAAY,SACvC,UAAU,IAAI,CAAC,KAAK,MAAM,QAAQ,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;IAEpE,KAAK,CAAU,KAAa,MAAY,SACtC,UAAU,GAAG,CAAC,KAAK,MAAM,QAAQ,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;IAEnE,OAAO,CAAU,KAAa,MAAY,SACxC,UAAU,KAAK,CAAC,KAAK,MAAM,QAAQ,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;IAErE,QAAQ,CAAU,KAAa,SAC7B,UAAU,MAAM,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;AAClE","debugId":null}},
    {"offset": {"line": 771, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/cart.ts"],"sourcesContent":["import { apiClient } from './client';\n\n// Типы для корзины\nexport interface CartItem {\n  cart_item_id: number;\n  item_id: number;\n  item_name: string;\n  item_description: string;\n  unit_price: number;\n  quantity: number;\n  total_price: number;\n  added_at: string;\n  image_url: string | null;\n  category_name: string;\n  is_vegetarian: boolean;\n  is_spicy: boolean;\n}\n\nexport interface Cart {\n  cart_id: string;\n  user_id: string;\n  items: CartItem[];\n  total_items: number;\n  total_amount: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AddToCartRequest {\n  item_id: number;\n  quantity: number;\n}\n\nexport interface UpdateCartItemRequest {\n  quantity: number;\n}\n\nexport class CartService {\n  private static instance: CartService;\n  \n  static getInstance(): CartService {\n    if (!CartService.instance) {\n      CartService.instance = new CartService();\n    }\n    return CartService.instance;\n  }\n\n  /**\n   * Получить корзину пользователя\n   */\n  async getCart(): Promise<Cart> {\n    try {\n      const response = await apiClient.get('/cart');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Ошибка получения корзины');\n    }\n  }\n\n  /**\n   * Добавить товар в корзину\n   */\n  async addToCart(itemId: number, quantity: number = 1): Promise<Cart> {\n    try {\n      const response = await apiClient.post('/cart/add', {\n        item_id: itemId,\n        quantity,\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Ошибка добавления товара в корзину');\n    }\n  }\n\n  /**\n   * Обновить количество товара в корзине\n   */\n  async updateCartItem(itemId: number, quantity: number): Promise<Cart> {\n    try {\n      const response = await apiClient.put(`/cart/item/${itemId}`, {\n        quantity,\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Ошибка обновления количества товара');\n    }\n  }\n\n  /**\n   * Удалить товар из корзины\n   */\n  async removeFromCart(itemId: number): Promise<Cart> {\n    try {\n      const response = await apiClient.delete(`/cart/item/${itemId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Ошибка удаления товара из корзины');\n    }\n  }\n\n  /**\n   * Очистить корзину полностью\n   */\n  async clearCart(): Promise<{ message: string }> {\n    try {\n      const response = await apiClient.delete('/cart/clear');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Ошибка очистки корзины');\n    }\n  }\n}\n\nexport const cartService = CartService.getInstance();"],"names":[],"mappings":";;;;;;;AAAA;;;AAqCO,MAAM;IAGX,OAAO,cAA2B;QAChC,IAAI,CAAC,YAAY,QAAQ,EAAE;YACzB,YAAY,QAAQ,GAAG,IAAI;QAC7B;QACA,OAAO,YAAY,QAAQ;IAC7B;IAEA;;GAEC,GACD,MAAM,UAAyB;QAC7B,IAAI;YACF,MAAM,WAAW,MAAM,2IAAS,CAAC,GAAG,CAAC;YACrC,OAAO,SAAS,IAAI;QACtB,EAAE,OAAO,OAAY;gBACH,sBAAA;YAAhB,MAAM,IAAI,MAAM,EAAA,kBAAA,MAAM,QAAQ,cAAd,uCAAA,uBAAA,gBAAgB,IAAI,cAApB,2CAAA,qBAAsB,OAAO,KAAI;QACnD;IACF;IAEA;;GAEC,GACD,MAAM,UAAU,MAAc,EAAuC;YAArC,WAAA,iEAAmB;QACjD,IAAI;YACF,MAAM,WAAW,MAAM,2IAAS,CAAC,IAAI,CAAC,aAAa;gBACjD,SAAS;gBACT;YACF;YACA,OAAO,SAAS,IAAI;QACtB,EAAE,OAAO,OAAY;gBACH,sBAAA;YAAhB,MAAM,IAAI,MAAM,EAAA,kBAAA,MAAM,QAAQ,cAAd,uCAAA,uBAAA,gBAAgB,IAAI,cAApB,2CAAA,qBAAsB,OAAO,KAAI;QACnD;IACF;IAEA;;GAEC,GACD,MAAM,eAAe,MAAc,EAAE,QAAgB,EAAiB;QACpE,IAAI;YACF,MAAM,WAAW,MAAM,2IAAS,CAAC,GAAG,CAAC,AAAC,cAAoB,OAAP,SAAU;gBAC3D;YACF;YACA,OAAO,SAAS,IAAI;QACtB,EAAE,OAAO,OAAY;gBACH,sBAAA;YAAhB,MAAM,IAAI,MAAM,EAAA,kBAAA,MAAM,QAAQ,cAAd,uCAAA,uBAAA,gBAAgB,IAAI,cAApB,2CAAA,qBAAsB,OAAO,KAAI;QACnD;IACF;IAEA;;GAEC,GACD,MAAM,eAAe,MAAc,EAAiB;QAClD,IAAI;YACF,MAAM,WAAW,MAAM,2IAAS,CAAC,MAAM,CAAC,AAAC,cAAoB,OAAP;YACtD,OAAO,SAAS,IAAI;QACtB,EAAE,OAAO,OAAY;gBACH,sBAAA;YAAhB,MAAM,IAAI,MAAM,EAAA,kBAAA,MAAM,QAAQ,cAAd,uCAAA,uBAAA,gBAAgB,IAAI,cAApB,2CAAA,qBAAsB,OAAO,KAAI;QACnD;IACF;IAEA;;GAEC,GACD,MAAM,YAA0C;QAC9C,IAAI;YACF,MAAM,WAAW,MAAM,2IAAS,CAAC,MAAM,CAAC;YACxC,OAAO,SAAS,IAAI;QACtB,EAAE,OAAO,OAAY;gBACH,sBAAA;YAAhB,MAAM,IAAI,MAAM,EAAA,kBAAA,MAAM,QAAQ,cAAd,uCAAA,uBAAA,gBAAgB,IAAI,cAApB,2CAAA,qBAAsB,OAAO,KAAI;QACnD;IACF;AACF;AAzEE,yKADW,aACI,YAAf,KAAA;AA2EK,MAAM,cAAc,YAAY,WAAW","debugId":null}},
    {"offset": {"line": 859, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/cart-context.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { Cart, CartItem, cartService } from '@/lib/api/cart';\nimport { useAuth } from './auth-context';\n\ninterface CartContextType {\n  cart: Cart | null;\n  loading: boolean;\n  error: string | null;\n  addToCart: (itemId: number, quantity?: number) => Promise<void>;\n  updateCartItem: (itemId: number, quantity: number) => Promise<void>;\n  removeFromCart: (itemId: number) => Promise<void>;\n  clearCart: () => Promise<void>;\n  refreshCart: () => Promise<void>;\n  getTotalItems: () => number;\n  getTotalAmount: () => number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\ninterface CartProviderProps {\n  children: React.ReactNode;\n}\n\nexport const CartProvider: React.FC<CartProviderProps> = ({ children }) => {\n  const [cart, setCart] = useState<Cart | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user, isAuthenticated } = useAuth();\n\n  // Функция для обработки ошибок\n  const handleError = (error: any, defaultMessage: string) => {\n    const errorMessage = error?.message || defaultMessage;\n    setError(errorMessage);\n    console.error(errorMessage, error);\n  };\n\n  // Загрузка корзины\n  const refreshCart = useCallback(async () => {\n    if (!isAuthenticated || !user || user.role !== 'user') {\n      setCart(null);\n      setError(null);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      const cartData = await cartService.getCart();\n      setCart(cartData);\n    } catch (error: any) {\n      // Если корзина пуста (404), это нормально\n      if (error.message?.includes('404') || error.message?.includes('не найдена') || error.status === 404) {\n        setCart(null);\n        setError(null);\n      } else {\n        handleError(error, 'Ошибка загрузки корзины');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [isAuthenticated, user]);\n\n  // Добавить товар в корзину\n  const addToCart = useCallback(async (itemId: number, quantity: number = 1) => {\n    if (!isAuthenticated) {\n      setError('Необходимо войти в систему для добавления товаров в корзину');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      const updatedCart = await cartService.addToCart(itemId, quantity);\n      \n      // Сохраняем порядок товаров при добавлении\n      if (cart && cart.items.length > 0) {\n        // Проверяем, есть ли уже такой товар в корзине\n        const existingItemIndex = cart.items.findIndex(item => item.item_id === itemId);\n        \n        if (existingItemIndex !== -1) {\n          // Товар уже есть - обновляем его количество на том же месте\n          const orderedItems = cart.items.map(originalItem => {\n            const updatedItem = updatedCart.items.find(item => item.item_id === originalItem.item_id);\n            return updatedItem || originalItem;\n          });\n          \n          setCart({\n            ...updatedCart,\n            items: orderedItems\n          });\n        } else {\n          // Новый товар - добавляем в конец\n          const existingItems = cart.items.map(originalItem => {\n            const updatedItem = updatedCart.items.find(item => item.item_id === originalItem.item_id);\n            return updatedItem || originalItem;\n          });\n          \n          const newItem = updatedCart.items.find(item => item.item_id === itemId);\n          if (newItem) {\n            setCart({\n              ...updatedCart,\n              items: [...existingItems, newItem]\n            });\n          } else {\n            setCart(updatedCart);\n          }\n        }\n      } else {\n        // Корзина пуста или нет товаров - просто устанавливаем новую корзину\n        setCart(updatedCart);\n      }\n    } catch (error: any) {\n      handleError(error, 'Ошибка добавления товара в корзину');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [isAuthenticated]);\n\n  // Обновить количество товара\n  const updateCartItem = useCallback(async (itemId: number, quantity: number) => {\n    const previousCart = cart;\n    \n    try {\n      setError(null);\n      \n      // Оптимистичное обновление: обновляем UI сразу\n      if (cart) {\n        const updatedItems = cart.items.map(item => \n          item.item_id === itemId \n            ? { ...item, quantity, total_price: item.unit_price * quantity }\n            : item\n        );\n        \n        const totalItems = updatedItems.reduce((sum, item) => sum + item.quantity, 0);\n        const totalAmount = updatedItems.reduce((sum, item) => sum + item.total_price, 0);\n        \n        setCart({\n          ...cart,\n          items: updatedItems,\n          total_items: totalItems,\n          total_amount: totalAmount\n        });\n      }\n      \n      // Отправляем запрос на сервер\n      const updatedCart = await cartService.updateCartItem(itemId, quantity);\n      \n      // Сохраняем оригинальный порядок товаров\n      if (cart) {\n        const orderedItems = cart.items.map(originalItem => {\n          const updatedItem = updatedCart.items.find(item => item.item_id === originalItem.item_id);\n          return updatedItem || originalItem;\n        });\n        \n        setCart({\n          ...updatedCart,\n          items: orderedItems\n        });\n      } else {\n        setCart(updatedCart);\n      }\n    } catch (error: any) {\n      // Откатываем изменения в случае ошибки\n      setCart(previousCart);\n      handleError(error, 'Ошибка обновления количества товара');\n      throw error;\n    }\n  }, [cart]);\n\n  // Удалить товар из корзины\n  const removeFromCart = useCallback(async (itemId: number) => {\n    const previousCart = cart;\n    \n    try {\n      setError(null);\n      \n      // Оптимистичное удаление: обновляем UI сразу\n      if (cart) {\n        const updatedItems = cart.items.filter(item => item.item_id !== itemId);\n        const totalItems = updatedItems.reduce((sum, item) => sum + item.quantity, 0);\n        const totalAmount = updatedItems.reduce((sum, item) => sum + item.total_price, 0);\n        \n        setCart({\n          ...cart,\n          items: updatedItems,\n          total_items: totalItems,\n          total_amount: totalAmount\n        });\n      }\n      \n      // Отправляем запрос на сервер\n      const updatedCart = await cartService.removeFromCart(itemId);\n      setCart(updatedCart);\n    } catch (error: any) {\n      // Откатываем изменения в случае ошибки\n      setCart(previousCart);\n      handleError(error, 'Ошибка удаления товара из корзины');\n      throw error;\n    }\n  }, [cart]);\n\n  // Очистить корзину\n  const clearCart = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      await cartService.clearCart();\n      setCart(null);\n    } catch (error: any) {\n      handleError(error, 'Ошибка очистки корзины');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Получить общее количество товаров\n  const getTotalItems = useCallback(() => {\n    return cart?.total_items || 0;\n  }, [cart]);\n\n  // Получить общую сумму\n  const getTotalAmount = useCallback(() => {\n    return cart?.total_amount || 0;\n  }, [cart]);\n\n  // Загружаем корзину только когда пользователь авторизован\n  useEffect(() => {\n    if (isAuthenticated && user?.role === 'user') {\n      refreshCart();\n    } else {\n      setCart(null);\n      setError(null);\n    }\n  }, [isAuthenticated, user, refreshCart]);\n\n  const value: CartContextType = {\n    cart,\n    loading,\n    error,\n    addToCart,\n    updateCartItem,\n    removeFromCart,\n    clearCart,\n    refreshCart,\n    getTotalItems,\n    getTotalAmount,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1175, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/services/health.ts"],"sourcesContent":["import { api } from '../client';\nimport { API_ENDPOINTS } from '../config';\nimport { HealthStatus, DatabaseHealth, DatabaseInfo } from '../types';\n\n// Health API service\nexport const healthApi = {\n  // Проверка работоспособности API\n  getHealth: (): Promise<HealthStatus> => \n    api.get(API_ENDPOINTS.health),\n\n  // Проверка подключения к базе данных\n  getDatabaseHealth: (): Promise<DatabaseHealth> => \n    api.get(API_ENDPOINTS.healthDb),\n\n  // Подробная информация о базе данных\n  getDatabaseInfo: (): Promise<DatabaseInfo> => \n    api.get(API_ENDPOINTS.healthDbInfo),\n};"],"names":[],"mappings":";;;;AAAA;AACA;;;AAIO,MAAM,YAAY;IACvB,iCAAiC;IACjC,WAAW,IACT,qIAAG,CAAC,GAAG,CAAC,+IAAa,CAAC,MAAM;IAE9B,qCAAqC;IACrC,mBAAmB,IACjB,qIAAG,CAAC,GAAG,CAAC,+IAAa,CAAC,QAAQ;IAEhC,qCAAqC;IACrC,iBAAiB,IACf,qIAAG,CAAC,GAAG,CAAC,+IAAa,CAAC,YAAY;AACtC","debugId":null}},
    {"offset": {"line": 1198, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/services/audit.ts"],"sourcesContent":["import { api } from '../client';\nimport { API_ENDPOINTS } from '../config';\nimport { AuditLog, AuditOperation } from '../types';\n\n// Audit API service\nexport const auditApi = {\n  // Получить записи аудита с фильтрацией\n  getAuditLogs: (params?: {\n    table?: string;\n    operation?: AuditOperation;\n    user?: string;\n    recordId?: string;\n    limit?: number;\n  }): Promise<AuditLog[]> => \n    api.get(API_ENDPOINTS.audit, { params }),\n\n  // Получить последние записи аудита\n  getRecentAuditLogs: (limit: number = 50): Promise<AuditLog[]> => \n    api.get(`${API_ENDPOINTS.auditRecent}?limit=${limit}`),\n\n  // Получить статистику аудита\n  getAuditStatistics: (): Promise<{\n    operationStats: any[];\n    tableStats: any[];\n  }> => \n    api.get(API_ENDPOINTS.auditStatistics),\n\n  // Получить историю изменений записи\n  getRecordHistory: (tableName: string, recordId: string): Promise<AuditLog[]> => \n    api.get(`${API_ENDPOINTS.audit}/history?table=${tableName}&recordId=${recordId}`),\n\n  // Получить изменения за последние дни\n  getRecentChanges: (days: number = 7): Promise<AuditLog[]> => \n    api.get(`${API_ENDPOINTS.audit}/recent-changes?days=${days}`),\n\n  // Получить активность пользователя\n  getUserActivity: (username: string, limit: number = 50): Promise<AuditLog[]> => \n    api.get(`${API_ENDPOINTS.audit}/user-activity?username=${username}&limit=${limit}`),\n};"],"names":[],"mappings":";;;;AAAA;AACA;;;AAIO,MAAM,WAAW;IACtB,uCAAuC;IACvC,cAAc,CAAC,SAOb,qIAAG,CAAC,GAAG,CAAC,+IAAa,CAAC,KAAK,EAAE;YAAE;QAAO;IAExC,mCAAmC;IACnC,oBAAoB;YAAC,yEAAgB;eACnC,qIAAG,CAAC,GAAG,CAAC,AAAC,GAAqC,OAAnC,+IAAa,CAAC,WAAW,EAAC,WAAe,OAAN;;IAEhD,6BAA6B;IAC7B,oBAAoB,IAIlB,qIAAG,CAAC,GAAG,CAAC,+IAAa,CAAC,eAAe;IAEvC,oCAAoC;IACpC,kBAAkB,CAAC,WAAmB,WACpC,qIAAG,CAAC,GAAG,CAAC,AAAC,GAAuC,OAArC,+IAAa,CAAC,KAAK,EAAC,mBAAuC,OAAtB,WAAU,cAAqB,OAAT;IAExE,sCAAsC;IACtC,kBAAkB;YAAC,wEAAe;eAChC,qIAAG,CAAC,GAAG,CAAC,AAAC,GAA6C,OAA3C,+IAAa,CAAC,KAAK,EAAC,yBAA4B,OAAL;;IAExD,mCAAmC;IACnC,iBAAiB,SAAC;YAAkB,yEAAgB;eAClD,qIAAG,CAAC,GAAG,CAAC,AAAC,GAAgD,OAA9C,+IAAa,CAAC,KAAK,EAAC,4BAA4C,OAAlB,UAAS,WAAe,OAAN;;AAC/E","debugId":null}},
    {"offset": {"line": 1238, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/services/menu.ts"],"sourcesContent":["import { apiClient } from '../client';\n\n// Типы для фильтров меню\nexport interface MenuFilterParams {\n  search?: string;\n  category_id?: number;\n  is_vegetarian?: boolean;\n  is_spicy?: boolean;\n  min_price?: number;\n  max_price?: number;\n  max_cooking_time?: number;\n  max_calories?: number;\n  sort_by?: 'price' | 'cooking_time_minutes' | 'calories' | 'item_name' | 'created_at';\n  sort_order?: 'ASC' | 'DESC';\n  page?: number;\n  limit?: number;\n}\n\nexport class MenuService {\n  // Получить все категории меню\n  static async getCategories() {\n    const response = await apiClient.get('/menu-categories');\n    return response.data;\n  }\n\n  // Получить категорию по ID\n  static async getCategoryById(id: number) {\n    const response = await apiClient.get(`/menu-categories/${id}`);\n    return response.data;\n  }\n\n  // Получить меню с фильтрацией\n  static async getMenu(filters?: MenuFilterParams) {\n    const response = await apiClient.get('/menu', { params: filters });\n    return response.data;\n  }\n\n  // Получить блюда по категории\n  static async getMenuByCategory(categoryId: number, filters?: MenuFilterParams) {\n    const response = await apiClient.get(`/menu/category/${categoryId}`, { params: filters });\n    return response.data;\n  }\n\n  // Получить блюдо по ID\n  static async getMenuItemById(id: number) {\n    const response = await apiClient.get(`/menu/${id}`);\n    return response.data;\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAkBO,MAAM;IACX,8BAA8B;IAC9B,aAAa,gBAAgB;QAC3B,MAAM,WAAW,MAAM,2IAAS,CAAC,GAAG,CAAC;QACrC,OAAO,SAAS,IAAI;IACtB;IAEA,2BAA2B;IAC3B,aAAa,gBAAgB,EAAU,EAAE;QACvC,MAAM,WAAW,MAAM,2IAAS,CAAC,GAAG,CAAC,AAAC,oBAAsB,OAAH;QACzD,OAAO,SAAS,IAAI;IACtB;IAEA,8BAA8B;IAC9B,aAAa,QAAQ,OAA0B,EAAE;QAC/C,MAAM,WAAW,MAAM,2IAAS,CAAC,GAAG,CAAC,SAAS;YAAE,QAAQ;QAAQ;QAChE,OAAO,SAAS,IAAI;IACtB;IAEA,8BAA8B;IAC9B,aAAa,kBAAkB,UAAkB,EAAE,OAA0B,EAAE;QAC7E,MAAM,WAAW,MAAM,2IAAS,CAAC,GAAG,CAAC,AAAC,kBAA4B,OAAX,aAAc;YAAE,QAAQ;QAAQ;QACvF,OAAO,SAAS,IAAI;IACtB;IAEA,uBAAuB;IACvB,aAAa,gBAAgB,EAAU,EAAE;QACvC,MAAM,WAAW,MAAM,2IAAS,CAAC,GAAG,CAAC,AAAC,SAAW,OAAH;QAC9C,OAAO,SAAS,IAAI;IACtB;AACF","debugId":null}},
    {"offset": {"line": 1282, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/services/restaurant.ts"],"sourcesContent":["import { apiClient } from '../client';\n\nexport interface RestaurantFilterParams {\n  search?: string;\n  city?: string;\n  country?: string;\n  is_active?: boolean;\n  min_rating?: number;\n}\n\nexport class RestaurantService {\n  // Получить все рестораны с фильтрацией\n  static async getRestaurants(filters?: RestaurantFilterParams) {\n    const response = await apiClient.get('/restaurants', { params: filters });\n    return response.data;\n  }\n\n  // Получить ресторан по ID с детальной информацией\n  static async getRestaurantById(id: number) {\n    const response = await apiClient.get(`/restaurants/${id}`);\n    return response.data;\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAUO,MAAM;IACX,uCAAuC;IACvC,aAAa,eAAe,OAAgC,EAAE;QAC5D,MAAM,WAAW,MAAM,2IAAS,CAAC,GAAG,CAAC,gBAAgB;YAAE,QAAQ;QAAQ;QACvE,OAAO,SAAS,IAAI;IACtB;IAEA,kDAAkD;IAClD,aAAa,kBAAkB,EAAU,EAAE;QACzC,MAAM,WAAW,MAAM,2IAAS,CAAC,GAAG,CAAC,AAAC,gBAAkB,OAAH;QACrD,OAAO,SAAS,IAAI;IACtB;AACF","debugId":null}},
    {"offset": {"line": 1309, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/services/index.ts"],"sourcesContent":["// Экспорт всех API сервисов\nexport { healthApi } from './health';\nexport { auditApi } from './audit';\nexport { MenuService } from './menu';\nexport { RestaurantService } from './restaurant';\n\n// Здесь будем добавлять новые сервисы по мере разработки API:\n// export { authApi } from './auth';\n// export { tablesApi } from './tables';\n// export { reservationsApi } from './reservations';\n// export { ordersApi } from './orders';"],"names":[],"mappings":"AAAA,4BAA4B;;AAC5B;AACA;AACA;AACA,wPAEA,8DAA8D;CAC9D,oCAAoC;CACpC,wCAAwC;CACxC,oDAAoD;CACpD,wCAAwC","debugId":null}},
    {"offset": {"line": 1330, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/reviews.ts"],"sourcesContent":["import { api } from './client';\nimport {\n  ReviewResponseDto,\n  CreateReviewDto,\n  UpdateReviewDto,\n  ReviewFilterDto,\n  PaginatedReviewsDto,\n  ReviewStatsDto,\n} from './types';\n\nexport const reviewsApi = {\n  // Получить все отзывы с фильтрацией\n  getReviews: async (filters: ReviewFilterDto = {}): Promise<PaginatedReviewsDto> => {\n    const params = new URLSearchParams();\n    \n    if (filters.restaurantId) params.append('restaurantId', filters.restaurantId.toString());\n    if (filters.userId) params.append('userId', filters.userId);\n    if (filters.minRating) params.append('minRating', filters.minRating.toString());\n    if (filters.maxRating) params.append('maxRating', filters.maxRating.toString());\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\n    if (filters.sortOrder) params.append('sortOrder', filters.sortOrder);\n    if (filters.page) params.append('page', filters.page.toString());\n    if (filters.limit) params.append('limit', filters.limit.toString());\n\n    const response = await api.get(`/reviews?${params.toString()}`);\n    return response;\n  },\n\n  // Получить отзывы конкретного ресторана\n  getRestaurantReviews: async (restaurantId: number, filters: ReviewFilterDto = {}): Promise<PaginatedReviewsDto> => {\n    const params = new URLSearchParams();\n    \n    if (filters.minRating) params.append('minRating', filters.minRating.toString());\n    if (filters.maxRating) params.append('maxRating', filters.maxRating.toString());\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\n    if (filters.sortOrder) params.append('sortOrder', filters.sortOrder);\n    if (filters.page) params.append('page', filters.page.toString());\n    if (filters.limit) params.append('limit', filters.limit.toString());\n\n    const response = await api.get(`/reviews/restaurant/${restaurantId}?${params.toString()}`);\n    return response;\n  },\n\n  // Получить статистику отзывов ресторана\n  getRestaurantReviewStats: async (restaurantId: number): Promise<ReviewStatsDto> => {\n    const response = await api.get(`/reviews/restaurant/${restaurantId}/stats`);\n    return response;\n  },\n\n  // Получить отзыв по ID\n  getReview: async (reviewId: string): Promise<ReviewResponseDto> => {\n    const response = await api.get(`/reviews/${reviewId}`);\n    return response;\n  },\n\n  // Создать новый отзыв\n  createReview: async (reviewData: CreateReviewDto): Promise<ReviewResponseDto> => {\n    const response = await api.post('/reviews', reviewData);\n    return response;\n  },\n\n  // Обновить отзыв (только админы)\n  updateReview: async (reviewId: string, reviewData: UpdateReviewDto): Promise<ReviewResponseDto> => {\n    const response = await api.put(`/reviews/${reviewId}`, reviewData);\n    return response;\n  },\n\n  // Удалить отзыв\n  deleteReview: async (reviewId: string): Promise<{ message: string }> => {\n    const response = await api.delete(`/reviews/${reviewId}`);\n    return response;\n  },\n\n  // Получить отзывы текущего пользователя\n  getMyReviews: async (filters: ReviewFilterDto = {}): Promise<PaginatedReviewsDto> => {\n    const params = new URLSearchParams();\n    \n    if (filters.minRating) params.append('minRating', filters.minRating.toString());\n    if (filters.maxRating) params.append('maxRating', filters.maxRating.toString());\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\n    if (filters.sortOrder) params.append('sortOrder', filters.sortOrder);\n    if (filters.page) params.append('page', filters.page.toString());\n    if (filters.limit) params.append('limit', filters.limit.toString());\n\n    const response = await api.get(`/reviews/my?${params.toString()}`);\n    return response;\n  },\n\n  // Удалить свой отзыв для ресторана\n  deleteMyRestaurantReview: async (restaurantId: number): Promise<{ message: string }> => {\n    const response = await api.delete(`/reviews/restaurant/${restaurantId}/my`);\n    return response;\n  },\n\n  // Переключить отзыв (создать или удалить)\n  toggleRestaurantReview: async (restaurantId: number, reviewData: CreateReviewDto): Promise<ReviewResponseDto | { message: string }> => {\n    const response = await api.post(`/reviews/restaurant/${restaurantId}/toggle`, reviewData);\n    return response;\n  },\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1421, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/reservations.ts"],"sourcesContent":["import { api } from './client';\n\nexport interface CreateReservationDto {\n  restaurant_id: number;\n  table_id: number;\n  reservation_date: string; // YYYY-MM-DD\n  reservation_time: string; // HH:MM\n  duration_hours: number;\n  guests_count: number;\n  contact_phone: string;\n}\n\nexport interface ReservationResponseDto {\n  reservation_id: string;\n  user_id: string;\n  restaurant_id: number;\n  restaurant_name: string;\n  table_id: number;\n  table_number: number;\n  seats_count: number;\n  reservation_date: string;\n  reservation_time: string;\n  duration_hours: number;\n  guests_count: number;\n  reservation_status: 'unconfirmed' | 'confirmed' | 'started' | 'completed' | 'cancelled';\n  contact_phone: string;\n  created_at: string;\n  updated_at: string;\n  confirmed_at: string | null;\n}\n\nexport interface TableResponseDto {\n  table_id: number;\n  restaurant_id: number;\n  table_number: number;\n  seats_count: number;\n  is_available: boolean;\n}\n\nexport interface ReservationAvailabilityDto {\n  reservations: ReservationResponseDto[];\n  occupiedTimeSlots: {\n    start: string;\n    end: string;\n    reservation_id: string;\n  }[];\n}\n\n// API функции\nexport const reservationsApi = {\n  // Создание бронирования\n  createReservation: (data: CreateReservationDto): Promise<ReservationResponseDto> =>\n    api.post('/reservations', data),\n\n  // Получение активных бронирований пользователя\n  getUserActiveReservations: (): Promise<ReservationResponseDto[]> =>\n    api.get('/reservations/my/active'),\n\n  // Получение всех бронирований пользователя\n  getUserReservations: (): Promise<ReservationResponseDto[]> =>\n    api.get('/reservations/my'),\n\n  // Подтверждение бронирования\n  confirmReservation: (reservationId: string): Promise<ReservationResponseDto> =>\n    api.patch(`/reservations/${reservationId}/confirm`),\n\n  // Отмена бронирования\n  cancelReservation: (reservationId: string): Promise<ReservationResponseDto> =>\n    api.patch(`/reservations/${reservationId}/cancel`),\n\n  // Получение столиков ресторана\n  getRestaurantTables: (restaurantId: number): Promise<TableResponseDto[]> =>\n    api.get(`/restaurants/${restaurantId}/tables`),\n\n  // Получение доступности столика на дату\n  getTableAvailability: (restaurantId: number, tableId: number, date: string): Promise<ReservationAvailabilityDto> =>\n    api.get(`/reservations/availability/${restaurantId}/${tableId}?date=${date}`),\n};"],"names":[],"mappings":";;;;AAAA;;AAiDO,MAAM,kBAAkB;IAC7B,wBAAwB;IACxB,mBAAmB,CAAC,OAClB,qIAAG,CAAC,IAAI,CAAC,iBAAiB;IAE5B,+CAA+C;IAC/C,2BAA2B,IACzB,qIAAG,CAAC,GAAG,CAAC;IAEV,2CAA2C;IAC3C,qBAAqB,IACnB,qIAAG,CAAC,GAAG,CAAC;IAEV,6BAA6B;IAC7B,oBAAoB,CAAC,gBACnB,qIAAG,CAAC,KAAK,CAAC,AAAC,iBAA8B,OAAd,eAAc;IAE3C,sBAAsB;IACtB,mBAAmB,CAAC,gBAClB,qIAAG,CAAC,KAAK,CAAC,AAAC,iBAA8B,OAAd,eAAc;IAE3C,+BAA+B;IAC/B,qBAAqB,CAAC,eACpB,qIAAG,CAAC,GAAG,CAAC,AAAC,gBAA4B,OAAb,cAAa;IAEvC,wCAAwC;IACxC,sBAAsB,CAAC,cAAsB,SAAiB,OAC5D,qIAAG,CAAC,GAAG,CAAC,AAAC,8BAA6C,OAAhB,cAAa,KAAmB,OAAhB,SAAQ,UAAa,OAAL;AAC1E","debugId":null}},
    {"offset": {"line": 1450, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/orders.ts"],"sourcesContent":["import { api } from './client';\n\nexport type OrderType = 'delivery' | 'dine_in';\n\nexport interface CreateOrderDto {\n  order_type: OrderType;\n  delivery_country?: string;\n  delivery_city?: string;\n  delivery_street_address?: string;\n  delivery_phone?: string;\n  reservation_id?: string;\n  should_update_user_address?: boolean;\n}\n\nexport interface OrderItemResponseDto {\n  order_item_id: number;\n  item_id: number;\n  item_name: string;\n  quantity: number;\n  unit_price: number;\n  total_price: number;\n}\n\nexport interface OrderResponseDto {\n  order_id: string;\n  user_id: string;\n  order_type: OrderType;\n  delivery_country?: string;\n  delivery_city?: string;\n  delivery_street_address?: string;\n  delivery_phone?: string;\n  reservation_id?: string;\n  subtotal: number;\n  delivery_fee: number;\n  total_amount: number;\n  created_at: string;\n  updated_at: string;\n  order_items?: OrderItemResponseDto[];\n}\n\nexport interface UserAddressDto {\n  country?: string;\n  city?: string;\n  street_address?: string;\n}\n\n// API функции\nexport const ordersApi = {\n  // Создание заказа\n  createOrder: (data: CreateOrderDto): Promise<OrderResponseDto> =>\n    api.post('/orders', data),\n\n  // Получение заказов пользователя\n  getUserOrders: (): Promise<OrderResponseDto[]> =>\n    api.get('/orders/my'),\n\n  // Получение конкретного заказа\n  getOrder: (orderId: string): Promise<OrderResponseDto> =>\n    api.get(`/orders/${orderId}`),\n\n  // Получение адреса пользователя для автозаполнения\n  getUserAddress: (): Promise<UserAddressDto | null> =>\n    api.get('/orders/my-address'),\n};"],"names":[],"mappings":";;;;AAAA;;AA+CO,MAAM,YAAY;IACvB,kBAAkB;IAClB,aAAa,CAAC,OACZ,qIAAG,CAAC,IAAI,CAAC,WAAW;IAEtB,iCAAiC;IACjC,eAAe,IACb,qIAAG,CAAC,GAAG,CAAC;IAEV,+BAA+B;IAC/B,UAAU,CAAC,UACT,qIAAG,CAAC,GAAG,CAAC,AAAC,WAAkB,OAAR;IAErB,mDAAmD;IACnD,gBAAgB,IACd,qIAAG,CAAC,GAAG,CAAC;AACZ","debugId":null}},
    {"offset": {"line": 1473, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/lib/api/hooks.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { MenuService, RestaurantService } from './services';\nimport { reviewsApi } from './reviews';\nimport { reservationsApi } from './reservations';\nimport { ordersApi } from './orders';\nimport { MenuFilterParams } from './services/menu';\nimport { RestaurantFilterParams } from './services/restaurant';\nimport { ReviewFilterDto, CreateReviewDto, UpdateReviewDto } from './types';\nimport { CreateReservationDto } from './reservations';\nimport { CreateOrderDto } from './orders';\n\n// Menu hooks\nexport const useMenuCategories = () => {\n  return useQuery({\n    queryKey: ['menu', 'categories'],\n    queryFn: MenuService.getCategories,\n    staleTime: 5 * 60 * 1000, // 5 минут\n  });\n};\n\nexport const useMenuCategory = (id: number) => {\n  return useQuery({\n    queryKey: ['menu', 'categories', id],\n    queryFn: () => MenuService.getCategoryById(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useMenu = (filters?: MenuFilterParams) => {\n  return useQuery({\n    queryKey: ['menu', 'items', filters],\n    queryFn: () => MenuService.getMenu(filters),\n    staleTime: 2 * 60 * 1000, // 2 минуты для меню\n  });\n};\n\nexport const useMenuByCategory = (categoryId: number, filters?: MenuFilterParams) => {\n  return useQuery({\n    queryKey: ['menu', 'items', 'category', categoryId, filters],\n    queryFn: () => MenuService.getMenuByCategory(categoryId, filters),\n    enabled: !!categoryId,\n    staleTime: 2 * 60 * 1000,\n  });\n};\n\nexport const useMenuItem = (id: number) => {\n  return useQuery({\n    queryKey: ['menu', 'items', id],\n    queryFn: () => MenuService.getMenuItemById(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\n// Restaurant hooks\nexport const useRestaurants = (filters?: RestaurantFilterParams) => {\n  return useQuery({\n    queryKey: ['restaurants', filters],\n    queryFn: () => RestaurantService.getRestaurants(filters),\n    staleTime: 5 * 60 * 1000, // 5 минут\n  });\n};\n\nexport const useRestaurant = (id: number) => {\n  return useQuery({\n    queryKey: ['restaurants', id],\n    queryFn: () => RestaurantService.getRestaurantById(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\n// Reviews hooks\nexport const useRestaurantReviews = (restaurantId: number, filters?: ReviewFilterDto) => {\n  return useQuery({\n    queryKey: ['reviews', 'restaurant', restaurantId, filters],\n    queryFn: () => reviewsApi.getRestaurantReviews(restaurantId, filters),\n    enabled: !!restaurantId,\n    staleTime: 2 * 60 * 1000, // 2 минуты\n  });\n};\n\nexport const useRestaurantReviewStats = (restaurantId: number) => {\n  return useQuery({\n    queryKey: ['reviews', 'restaurant', restaurantId, 'stats'],\n    queryFn: () => reviewsApi.getRestaurantReviewStats(restaurantId),\n    enabled: !!restaurantId,\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useMyReviews = (filters?: ReviewFilterDto) => {\n  return useQuery({\n    queryKey: ['reviews', 'my', filters],\n    queryFn: () => reviewsApi.getMyReviews(filters),\n    staleTime: 2 * 60 * 1000,\n  });\n};\n\nexport const useReview = (reviewId: string) => {\n  return useQuery({\n    queryKey: ['reviews', reviewId],\n    queryFn: () => reviewsApi.getReview(reviewId),\n    enabled: !!reviewId,\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\n// Reviews mutations\nexport const useCreateReview = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (reviewData: CreateReviewDto) => reviewsApi.createReview(reviewData),\n    onSuccess: (data) => {\n      // Обновляем кэш отзывов ресторана\n      queryClient.invalidateQueries({ \n        queryKey: ['reviews', 'restaurant', data.restaurant_id] \n      });\n      // Обновляем мои отзывы\n      queryClient.invalidateQueries({ \n        queryKey: ['reviews', 'my'] \n      });\n      // Обновляем информацию о ресторане (рейтинг мог измениться)\n      queryClient.invalidateQueries({ \n        queryKey: ['restaurants', data.restaurant_id] \n      });\n    },\n  });\n};\n\nexport const useUpdateReview = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ reviewId, reviewData }: { reviewId: string; reviewData: UpdateReviewDto }) =>\n      reviewsApi.updateReview(reviewId, reviewData),\n    onSuccess: (data) => {\n      // Обновляем кэш конкретного отзыва\n      queryClient.invalidateQueries({ \n        queryKey: ['reviews', data.review_id] \n      });\n      // Обновляем отзывы ресторана\n      queryClient.invalidateQueries({ \n        queryKey: ['reviews', 'restaurant', data.restaurant_id] \n      });\n      // Обновляем мои отзывы\n      queryClient.invalidateQueries({ \n        queryKey: ['reviews', 'my'] \n      });\n      // Обновляем информацию о ресторане\n      queryClient.invalidateQueries({ \n        queryKey: ['restaurants', data.restaurant_id] \n      });\n    },\n  });\n};\n\nexport const useDeleteReview = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (reviewId: string) => reviewsApi.deleteReview(reviewId),\n    onSuccess: (_, reviewId) => {\n      // Удаляем конкретный отзыв из кэша\n      queryClient.removeQueries({ \n        queryKey: ['reviews', reviewId] \n      });\n      // Обновляем все связанные запросы\n      queryClient.invalidateQueries({ \n        queryKey: ['reviews'] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['restaurants'] \n      });\n    },\n  });\n};\n\nexport const useDeleteMyRestaurantReview = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (restaurantId: number) => reviewsApi.deleteMyRestaurantReview(restaurantId),\n    onSuccess: (_, restaurantId) => {\n      // Обновляем отзывы ресторана\n      queryClient.invalidateQueries({ \n        queryKey: ['reviews', 'restaurant', restaurantId] \n      });\n      // Обновляем мои отзывы\n      queryClient.invalidateQueries({ \n        queryKey: ['reviews', 'my'] \n      });\n      // Обновляем информацию о ресторане\n      queryClient.invalidateQueries({ \n        queryKey: ['restaurants', restaurantId] \n      });\n    },\n  });\n};\n\n// Reservations hooks\nexport const useUserActiveReservations = () => {\n  return useQuery({\n    queryKey: ['reservations', 'my', 'active'],\n    queryFn: reservationsApi.getUserActiveReservations,\n    staleTime: 30 * 1000, // 30 секунд - часто обновляем для актуальности\n  });\n};\n\nexport const useUserReservations = () => {\n  return useQuery({\n    queryKey: ['reservations', 'my'],\n    queryFn: reservationsApi.getUserReservations,\n    staleTime: 2 * 60 * 1000, // 2 минуты\n  });\n};\n\nexport const useRestaurantTables = (restaurantId: number) => {\n  return useQuery({\n    queryKey: ['restaurants', restaurantId, 'tables'],\n    queryFn: () => reservationsApi.getRestaurantTables(restaurantId),\n    enabled: !!restaurantId,\n    staleTime: 5 * 60 * 1000, // 5 минут\n  });\n};\n\nexport const useTableAvailability = (restaurantId: number, tableId: number, date: string) => {\n  return useQuery({\n    queryKey: ['reservations', 'availability', restaurantId, tableId, date],\n    queryFn: () => reservationsApi.getTableAvailability(restaurantId, tableId, date),\n    enabled: !!restaurantId && !!tableId && !!date,\n    staleTime: 1 * 60 * 1000, // 1 минута - быстро обновляем для точности\n  });\n};\n\n// Reservations mutations\nexport const useCreateReservation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (reservationData: CreateReservationDto) => reservationsApi.createReservation(reservationData),\n    onSuccess: () => {\n      // Обновляем активные бронирования пользователя\n      queryClient.invalidateQueries({ \n        queryKey: ['reservations', 'my', 'active'] \n      });\n      // Обновляем все бронирования пользователя\n      queryClient.invalidateQueries({ \n        queryKey: ['reservations', 'my'] \n      });\n      // Обновляем доступность столиков\n      queryClient.invalidateQueries({ \n        queryKey: ['reservations', 'availability'] \n      });\n    },\n  });\n};\n\nexport const useConfirmReservation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (reservationId: string) => reservationsApi.confirmReservation(reservationId),\n    onSuccess: () => {\n      // Обновляем активные бронирования пользователя\n      queryClient.invalidateQueries({ \n        queryKey: ['reservations', 'my', 'active'] \n      });\n      // Обновляем все бронирования пользователя\n      queryClient.invalidateQueries({ \n        queryKey: ['reservations', 'my'] \n      });\n    },\n  });\n};\n\nexport const useCancelReservation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (reservationId: string) => reservationsApi.cancelReservation(reservationId),\n    onSuccess: () => {\n      // Обновляем активные бронирования пользователя\n      queryClient.invalidateQueries({ \n        queryKey: ['reservations', 'my', 'active'] \n      });\n      // Обновляем все бронирования пользователя\n      queryClient.invalidateQueries({ \n        queryKey: ['reservations', 'my'] \n      });\n      // Обновляем доступность столиков\n      queryClient.invalidateQueries({ \n        queryKey: ['reservations', 'availability'] \n      });\n    },\n  });\n};\n\n// Orders hooks\nexport const useUserOrders = () => {\n  return useQuery({\n    queryKey: ['orders', 'my'],\n    queryFn: ordersApi.getUserOrders,\n    staleTime: 2 * 60 * 1000, // 2 минуты\n  });\n};\n\nexport const useOrder = (orderId: string) => {\n  return useQuery({\n    queryKey: ['orders', orderId],\n    queryFn: () => ordersApi.getOrder(orderId),\n    enabled: !!orderId,\n    staleTime: 5 * 60 * 1000, // 5 минут\n  });\n};\n\nexport const useUserAddress = () => {\n  return useQuery({\n    queryKey: ['user', 'address'],\n    queryFn: ordersApi.getUserAddress,\n    staleTime: 5 * 60 * 1000, // 5 минут\n  });\n};\n\n// Получение активных бронирований со статусом 'started' для заказа в ресторане\nexport const useUserStartedReservations = () => {\n  return useQuery({\n    queryKey: ['reservations', 'my', 'started'],\n    queryFn: async () => {\n      const reservations = await reservationsApi.getUserActiveReservations();\n      return reservations.filter(r => r.reservation_status === 'started');\n    },\n    staleTime: 30 * 1000, // 30 секунд - часто обновляем для актуальности\n  });\n};\n\n// Orders mutations\nexport const useCreateOrder = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (orderData: CreateOrderDto) => ordersApi.createOrder(orderData),\n    onSuccess: () => {\n      // Обновляем заказы пользователя\n      queryClient.invalidateQueries({ \n        queryKey: ['orders', 'my'] \n      });\n      // Обновляем корзину (она должна очиститься после заказа)\n      queryClient.invalidateQueries({ \n        queryKey: ['cart'] \n      });\n      // Обновляем активные бронирования (если заказ был в ресторане)\n      queryClient.invalidateQueries({ \n        queryKey: ['reservations', 'my', 'active'] \n      });\n    },\n  });\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2241, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/components/reservations/ActiveReservationBadge.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Badge,\n  IconButton,\n  Popover,\n  Paper,\n  Typography,\n  Box,\n  Button,\n  Chip,\n  Divider,\n  Alert,\n  CircularProgress\n} from '@mui/material';\nimport {\n  Event as EventIcon,\n  Restaurant as RestaurantIcon,\n  AccessTime as AccessTimeIcon,\n  People as PeopleIcon,\n  TableRestaurant as TableRestaurantIcon,\n  Check as CheckIcon,\n  Cancel as CancelIcon,\n  ShoppingCart as ShoppingCartIcon\n} from '@mui/icons-material';\nimport { useUserActiveReservations, useConfirmReservation, useCancelReservation } from '@/lib/api/hooks';\nimport type { ReservationResponseDto } from '@/lib/api/reservations';\n\n// Цвета для активных статусов (только те, что отображаются в header)\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'unconfirmed':\n      return 'warning'; // Желтый - требует действия\n    case 'confirmed':\n      return 'success'; // Зеленый - подтверждено\n    case 'started':\n      return 'primary'; // Синий - можно заказывать\n    default:\n      return 'default';\n  }\n};\n\n// Перевод активных статусов\nconst getStatusText = (status: string) => {\n  switch (status) {\n    case 'unconfirmed':\n      return 'Неподтвержденное';\n    case 'confirmed':\n      return 'Подтверждено';\n    case 'started':\n      return 'Начато';\n    default:\n      return status;\n  }\n};\n\nconst ActiveReservationBadge: React.FC = () => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const { data: activeReservations = [], isLoading } = useUserActiveReservations();\n  const confirmMutation = useConfirmReservation();\n  const cancelMutation = useCancelReservation();\n\n  // Показываем только первое активное бронирование (по бизнес-логике может быть только одно)\n  // Фильтруем только действительно активные статусы для отображения в header\n  const displayableReservation = activeReservations.find(reservation => \n    ['unconfirmed', 'confirmed', 'started'].includes(reservation.reservation_status)\n  );\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleConfirm = async () => {\n    if (displayableReservation) {\n      try {\n        await confirmMutation.mutateAsync(displayableReservation.reservation_id);\n        handleClose();\n      } catch (error) {\n        console.error('Failed to confirm reservation:', error);\n      }\n    }\n  };\n\n  const handleCancel = async () => {\n    if (displayableReservation) {\n      try {\n        await cancelMutation.mutateAsync(displayableReservation.reservation_id);\n        handleClose();\n      } catch (error) {\n        console.error('Failed to cancel reservation:', error);\n      }\n    }\n  };\n\n  // Если нет активных бронирований для отображения, не показываем ничего\n  if (isLoading || !displayableReservation) {\n    return null;\n  }\n\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <IconButton\n        color=\"inherit\"\n        onClick={handleClick}\n        sx={{\n          '&:hover': {\n            backgroundColor: 'rgba(255, 255, 255, 0.2)',\n          },\n        }}\n      >\n        <Badge\n          color={getStatusColor(displayableReservation.reservation_status) as any}\n          variant=\"dot\"\n        >\n          <EventIcon />\n        </Badge>\n      </IconButton>\n\n      <Popover\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <Paper sx={{ p: 3, maxWidth: 400 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Активное бронирование\n          </Typography>\n\n          <Box sx={{ mb: 2 }}>\n            <Chip\n              label={getStatusText(displayableReservation.reservation_status)}\n              color={getStatusColor(displayableReservation.reservation_status) as any}\n              size=\"small\"\n            />\n          </Box>\n\n          <Box sx={{ mb: 2 }}>\n            <Typography variant=\"body2\" sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <RestaurantIcon sx={{ mr: 1, fontSize: 16 }} />\n              {displayableReservation.restaurant_name}\n            </Typography>\n            \n            <Typography variant=\"body2\" sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <EventIcon sx={{ mr: 1, fontSize: 16 }} />\n              {displayableReservation.reservation_date}\n            </Typography>\n            \n            <Typography variant=\"body2\" sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <AccessTimeIcon sx={{ mr: 1, fontSize: 16 }} />\n              {displayableReservation.reservation_time} ({displayableReservation.duration_hours} ч.)\n            </Typography>\n            \n            <Typography variant=\"body2\" sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <PeopleIcon sx={{ mr: 1, fontSize: 16 }} />\n              {displayableReservation.guests_count} человек(а)\n            </Typography>\n            \n            <Typography variant=\"body2\" sx={{ display: 'flex', alignItems: 'center' }}>\n              <TableRestaurantIcon sx={{ mr: 1, fontSize: 16 }} />\n              Столик №{displayableReservation.table_number}\n            </Typography>\n          </Box>\n\n          {/* Отображение ошибок */}\n          {(confirmMutation.error || cancelMutation.error) && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {(confirmMutation.error as any)?.message || \n               (cancelMutation.error as any)?.message ||\n               'Произошла ошибка'}\n            </Alert>\n          )}\n\n          <Divider sx={{ my: 2 }} />\n\n          {/* Кнопки действий в зависимости от статуса */}\n          <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n            {displayableReservation.reservation_status === 'unconfirmed' && (\n              <>\n                <Button\n                  variant=\"contained\"\n                  color=\"success\"\n                  startIcon={confirmMutation.isPending ? <CircularProgress size={16} /> : <CheckIcon />}\n                  onClick={handleConfirm}\n                  disabled={confirmMutation.isPending || cancelMutation.isPending}\n                  size=\"small\"\n                >\n                  Подтвердить\n                </Button>\n                \n                <Button\n                  variant=\"outlined\"\n                  color=\"error\"\n                  startIcon={cancelMutation.isPending ? <CircularProgress size={16} /> : <CancelIcon />}\n                  onClick={handleCancel}\n                  disabled={confirmMutation.isPending || cancelMutation.isPending}\n                  size=\"small\"\n                >\n                  Отменить\n                </Button>\n              </>\n            )}\n\n            {displayableReservation.reservation_status === 'started' && (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<ShoppingCartIcon />}\n                size=\"small\"\n                disabled // Пока без функционала\n              >\n                Сделать заказ\n              </Button>\n            )}\n\n            {displayableReservation.reservation_status === 'confirmed' && (\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\n                Бронирование подтверждено\n              </Typography>\n            )}\n          </Box>\n        </Paper>\n      </Popover>\n    </>\n  );\n};\n\nexport default ActiveReservationBadge;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2708, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/components/layout/Header.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { \n  AppBar, \n  Toolbar, \n  Typography, \n  Box, \n  Button,\n  Container,\n  Menu,\n  MenuItem,\n  Avatar\n} from '@mui/material';\nimport { useRouter, usePathname } from 'next/navigation';\nimport RestaurantIcon from '@mui/icons-material/Restaurant';\nimport PersonIcon from '@mui/icons-material/Person';\nimport ExitToAppIcon from '@mui/icons-material/ExitToApp';\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\nimport { Badge, IconButton } from '@mui/material';\nimport { useAuth } from '@/lib/auth-context';\nimport { useCart } from '@/lib/cart-context';\nimport ActiveReservationBadge from '@/components/reservations/ActiveReservationBadge';\n\nconst Header: React.FC = () => {\n  const router = useRouter();\n  const pathname = usePathname();\n  const { user, isAuthenticated, logout } = useAuth();\n  const { getTotalItems } = useCart();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  // Навигационные элементы в зависимости от статуса авторизации\n  const getNavigationItems = () => {\n    const baseItems = [\n      { label: 'Меню', path: '/' },\n      { label: 'Рестораны', path: '/restaurants' },\n      { label: 'О нас', path: '/about' },\n    ];\n\n    if (!isAuthenticated) {\n      return [\n        ...baseItems,\n        { label: 'Вход', path: '/auth/login' },\n      ];\n    }\n\n    // Для авторизованных пользователей - добавляем пункты в зависимости от роли\n    if (user?.role === 'user') {\n      return baseItems; // Профиль будет в выпадающем меню\n    }\n\n    return baseItems; // Для admin/manager тоже базовые пункты\n  };\n\n  const handleNavigation = (path: string) => {\n    router.push(path);\n  };\n\n  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleProfileMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleProfileClick = () => {\n    handleProfileMenuClose();\n    router.push('/profile');\n  };\n\n  const handleLogout = async () => {\n    handleProfileMenuClose();\n    try {\n      await logout();\n      router.push('/');\n    } catch (error) {\n      console.error('Logout failed:', error);\n      // Все равно перенаправляем на главную\n      router.push('/');\n    }\n  };\n\n  const navigationItems = getNavigationItems();\n\n  return (\n    <AppBar position=\"sticky\" sx={{ backgroundColor: '#2E7D32' }}>\n      <Container maxWidth=\"lg\">\n        <Toolbar sx={{ justifyContent: 'space-between' }}>\n          {/* Логотип и название */}\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <RestaurantIcon sx={{ fontSize: 32 }} />\n            <Typography \n              variant=\"h5\" \n              component=\"div\" \n              sx={{ \n                fontWeight: 'bold',\n                cursor: 'pointer'\n              }}\n              onClick={() => handleNavigation('/')}\n            >\n              Грузинская Кухня\n            </Typography>\n          </Box>\n\n          {/* Навигационное меню */}\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {navigationItems.map((item) => (\n              <Button\n                key={item.path}\n                color=\"inherit\"\n                onClick={() => handleNavigation(item.path)}\n                sx={{\n                  fontWeight: pathname === item.path ? 'bold' : 'normal',\n                  backgroundColor: pathname === item.path ? 'rgba(255, 255, 255, 0.1)' : 'transparent',\n                  '&:hover': {\n                    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n                  },\n                  borderRadius: 1,\n                  px: 3,\n                  py: 1,\n                }}\n              >\n                {item.label}\n              </Button>\n            ))}\n\n            {/* Кнопка корзины для авторизованных пользователей-клиентов */}\n            {isAuthenticated && user?.role === 'user' && (\n              <IconButton\n                color=\"inherit\"\n                onClick={() => handleNavigation('/cart')}\n                sx={{\n                  '&:hover': {\n                    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n                  },\n                }}\n              >\n                <Badge badgeContent={getTotalItems()} color=\"error\">\n                  <ShoppingCartIcon />\n                </Badge>\n              </IconButton>\n            )}\n\n            {/* Активное бронирование для авторизованных пользователей-клиентов */}\n            {isAuthenticated && user?.role === 'user' && (\n              <ActiveReservationBadge />\n            )}\n\n            {/* Меню профиля для авторизованных пользователей */}\n            {isAuthenticated && (\n              <>\n                <Button\n                  color=\"inherit\"\n                  onClick={handleProfileMenuOpen}\n                  startIcon={<Avatar sx={{ width: 24, height: 24, bgcolor: '#1B5E20' }}>\n                    <PersonIcon sx={{ fontSize: 16 }} />\n                  </Avatar>}\n                  sx={{\n                    borderRadius: 1,\n                    px: 2,\n                    py: 1,\n                    '&:hover': {\n                      backgroundColor: 'rgba(255, 255, 255, 0.2)',\n                    },\n                  }}\n                >\n                  {user?.first_name}\n                </Button>\n                \n                <Menu\n                  anchorEl={anchorEl}\n                  open={Boolean(anchorEl)}\n                  onClose={handleProfileMenuClose}\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                  }}\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                  }}\n                >\n                  {user?.role === 'user' && (\n                    <MenuItem onClick={handleProfileClick}>\n                      <PersonIcon sx={{ mr: 1 }} />\n                      Профиль\n                    </MenuItem>\n                  )}\n                  \n                  <MenuItem onClick={handleLogout}>\n                    <ExitToAppIcon sx={{ mr: 1 }} />\n                    Выход\n                  </MenuItem>\n                </Menu>\n              </>\n            )}\n          </Box>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n};\n\nexport default Header;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3055, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/components/layout/Footer.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { \n  Box, \n  Typography, \n  Container, \n  Link,\n  Divider \n} from '@mui/material';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport EmailIcon from '@mui/icons-material/Email';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\n\nconst Footer: React.FC = () => {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <Box\n      component=\"footer\"\n      sx={{\n        mt: 'auto',\n        py: 4,\n        backgroundColor: '#1B5E20',\n        color: 'white',\n      }}\n    >\n      <Container maxWidth=\"lg\">\n        <Box \n          sx={{ \n            display: 'grid', \n            gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr', md: '1fr 1fr 1fr' },\n            gap: 4 \n          }}\n        >\n          {/* Информация о ресторане */}\n          <Box>\n            <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold' }}>\n              Грузинская Кухня\n            </Typography>\n            <Typography variant=\"body2\" sx={{ mb: 2, lineHeight: 1.8 }}>\n              Аутентичные грузинские блюда, приготовленные по традиционным рецептам. \n              Окунитесь в мир настоящих вкусов Грузии!\n            </Typography>\n          </Box>\n\n          {/* Контактная информация */}\n          <Box>\n            <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold' }}>\n              Контакты\n            </Typography>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <PhoneIcon fontSize=\"small\" />\n                <Typography variant=\"body2\">+995 555 123 456</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <EmailIcon fontSize=\"small\" />\n                <Typography variant=\"body2\">info@georgian-cuisine.ge</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <LocationOnIcon fontSize=\"small\" />\n                <Typography variant=\"body2\">Тбилиси, ул. Руставели, 15</Typography>\n              </Box>\n            </Box>\n          </Box>\n\n          {/* Навигация */}\n          <Box>\n            <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold' }}>\n              Навигация\n            </Typography>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n              <Link \n                href=\"/\" \n                color=\"inherit\" \n                underline=\"hover\"\n                sx={{ fontSize: '0.875rem' }}\n              >\n                Меню\n              </Link>\n              <Link \n                href=\"/restaurants\" \n                color=\"inherit\" \n                underline=\"hover\"\n                sx={{ fontSize: '0.875rem' }}\n              >\n                Рестораны\n              </Link>\n              <Link \n                href=\"/about\" \n                color=\"inherit\" \n                underline=\"hover\"\n                sx={{ fontSize: '0.875rem' }}\n              >\n                О нас\n              </Link>\n            </Box>\n          </Box>\n        </Box>\n\n        <Divider sx={{ my: 3, backgroundColor: 'rgba(255, 255, 255, 0.2)' }} />\n\n        {/* Копирайт */}\n        <Box sx={{ textAlign: 'center' }}>\n          <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n            © {currentYear} Грузинская Кухня. Все права защищены.\n          </Typography>\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Footer;"],"names":[],"mappings":";;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAZA;;;;;;AAcA,MAAM,SAAmB;IACvB,MAAM,cAAc,IAAI,OAAO,WAAW;IAE1C,qBACE,6LAAC,kMAAG;QACF,WAAU;QACV,IAAI;YACF,IAAI;YACJ,IAAI;YACJ,iBAAiB;YACjB,OAAO;QACT;kBAEA,cAAA,6LAAC,0NAAS;YAAC,UAAS;;8BAClB,6LAAC,kMAAG;oBACF,IAAI;wBACF,SAAS;wBACT,qBAAqB;4BAAE,IAAI;4BAAO,IAAI;4BAAW,IAAI;wBAAc;wBACnE,KAAK;oBACP;;sCAGA,6LAAC,kMAAG;;8CACF,6LAAC,8NAAU;oCAAC,SAAQ;oCAAK,YAAY;oCAAC,IAAI;wCAAE,YAAY;oCAAO;8CAAG;;;;;;8CAGlE,6LAAC,8NAAU;oCAAC,SAAQ;oCAAQ,IAAI;wCAAE,IAAI;wCAAG,YAAY;oCAAI;8CAAG;;;;;;;;;;;;sCAO9D,6LAAC,kMAAG;;8CACF,6LAAC,8NAAU;oCAAC,SAAQ;oCAAK,YAAY;oCAAC,IAAI;wCAAE,YAAY;oCAAO;8CAAG;;;;;;8CAGlE,6LAAC,kMAAG;oCAAC,IAAI;wCAAE,SAAS;wCAAQ,eAAe;wCAAU,KAAK;oCAAE;;sDAC1D,6LAAC,kMAAG;4CAAC,IAAI;gDAAE,SAAS;gDAAQ,YAAY;gDAAU,KAAK;4CAAE;;8DACvD,6LAAC,wKAAS;oDAAC,UAAS;;;;;;8DACpB,6LAAC,8NAAU;oDAAC,SAAQ;8DAAQ;;;;;;;;;;;;sDAE9B,6LAAC,kMAAG;4CAAC,IAAI;gDAAE,SAAS;gDAAQ,YAAY;gDAAU,KAAK;4CAAE;;8DACvD,6LAAC,wKAAS;oDAAC,UAAS;;;;;;8DACpB,6LAAC,8NAAU;oDAAC,SAAQ;8DAAQ;;;;;;;;;;;;sDAE9B,6LAAC,kMAAG;4CAAC,IAAI;gDAAE,SAAS;gDAAQ,YAAY;gDAAU,KAAK;4CAAE;;8DACvD,6LAAC,6KAAc;oDAAC,UAAS;;;;;;8DACzB,6LAAC,8NAAU;oDAAC,SAAQ;8DAAQ;;;;;;;;;;;;;;;;;;;;;;;;sCAMlC,6LAAC,kMAAG;;8CACF,6LAAC,8NAAU;oCAAC,SAAQ;oCAAK,YAAY;oCAAC,IAAI;wCAAE,YAAY;oCAAO;8CAAG;;;;;;8CAGlE,6LAAC,kMAAG;oCAAC,IAAI;wCAAE,SAAS;wCAAQ,eAAe;wCAAU,KAAK;oCAAI;;sDAC5D,6LAAC,sMAAI;4CACH,MAAK;4CACL,OAAM;4CACN,WAAU;4CACV,IAAI;gDAAE,UAAU;4CAAW;sDAC5B;;;;;;sDAGD,6LAAC,sMAAI;4CACH,MAAK;4CACL,OAAM;4CACN,WAAU;4CACV,IAAI;gDAAE,UAAU;4CAAW;sDAC5B;;;;;;sDAGD,6LAAC,sMAAI;4CACH,MAAK;4CACL,OAAM;4CACN,WAAU;4CACV,IAAI;gDAAE,UAAU;4CAAW;sDAC5B;;;;;;;;;;;;;;;;;;;;;;;;8BAOP,6LAAC,kNAAO;oBAAC,IAAI;wBAAE,IAAI;wBAAG,iBAAiB;oBAA2B;;;;;;8BAGlE,6LAAC,kMAAG;oBAAC,IAAI;wBAAE,WAAW;oBAAS;8BAC7B,cAAA,6LAAC,8NAAU;wBAAC,SAAQ;wBAAQ,IAAI;4BAAE,SAAS;wBAAI;;4BAAG;4BAC7C;4BAAY;;;;;;;;;;;;;;;;;;;;;;;AAM3B;KAlGM;uCAoGS","debugId":null}},
    {"offset": {"line": 3382, "column": 0}, "map": {"version":3,"sources":["file:///Users/keluch/Desktop/coledj/4year/coursework2/georgian_restaurant_web/src/components/layout/LayoutWrapper.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { Box } from '@mui/material';\nimport Header from '@/components/layout/Header';\nimport Footer from '@/components/layout/Footer';\n\ninterface LayoutWrapperProps {\n  children: React.ReactNode;\n}\n\nexport default function LayoutWrapper({ children }: LayoutWrapperProps) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh',\n      }}\n    >\n      <Header />\n      <Box component=\"main\" sx={{ flexGrow: 1 }}>\n        {children}\n      </Box>\n      <Footer />\n    </Box>\n  );\n}"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AALA;;;;;AAWe,SAAS,cAAc,KAAgC;QAAhC,EAAE,QAAQ,EAAsB,GAAhC;IACpC,qBACE,6LAAC,kMAAG;QACF,IAAI;YACF,SAAS;YACT,eAAe;YACf,WAAW;QACb;;0BAEA,6LAAC,oJAAM;;;;;0BACP,6LAAC,kMAAG;gBAAC,WAAU;gBAAO,IAAI;oBAAE,UAAU;gBAAE;0BACrC;;;;;;0BAEH,6LAAC,oJAAM;;;;;;;;;;;AAGb;KAhBwB","debugId":null}}]
}